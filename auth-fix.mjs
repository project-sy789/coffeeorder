/**
 * ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏ï‡∏ô ‡πÅ‡∏ö‡∏ö ES Module
 * 
 * ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: RangeError: Input buffers must have the same byte length
 * ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: NODE_OPTIONS=--experimental-vm-modules node auth-fix.mjs
 */

import { createRequire } from 'module';
import { fileURLToPath } from 'url';
import { dirname, resolve } from 'path';
import { promises as fs } from 'fs';

// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡πÅ‡∏ö‡∏ö CommonJS
const require = createRequire(import.meta.url);
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•
const colors = {
  reset: "\x1b[0m",
  bright: "\x1b[1m",
  red: "\x1b[31m",
  green: "\x1b[32m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  cyan: "\x1b[36m"
};

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏µ
 */
function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

async function main() {
  log('\n==================================================', colors.bright + colors.cyan);
  log('üîß ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏ï‡∏ô ‡πÅ‡∏ö‡∏ö ES Module', colors.bright + colors.cyan);
  log('==================================================\n', colors.bright + colors.cyan);
  
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå auth.js ‡∏´‡∏£‡∏∑‡∏≠ auth.ts
  const paths = [
    'server/auth.js',
    'server/auth.ts',
    'server/auth/index.js',
    'server/auth/index.ts',
    'dist/auth.js',
    'dist/server/auth.js'
  ];
  
  let authFilePath = null;
  
  for (const path of paths) {
    try {
      await fs.access(path);
      authFilePath = path;
      log(`‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå ${path}`, colors.green);
      break;
    } catch (error) {
      // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå
    }
  }
  
  if (!authFilePath) {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ comparePasswords
    log('üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå auth.js ‡∏´‡∏£‡∏∑‡∏≠ auth.ts ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô comparePasswords...', colors.yellow);
    
    const distDir = 'dist';
    let filesWithComparePasswords = [];
    
    try {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô dist directory
      const findFiles = async (dir) => {
        const entries = await fs.readdir(dir, { withFileTypes: true });
        
        for (const entry of entries) {
          const fullPath = resolve(dir, entry.name);
          
          if (entry.isDirectory()) {
            await findFiles(fullPath);
          } else if (entry.name.endsWith('.js')) {
            const content = await fs.readFile(fullPath, 'utf8');
            if (content.includes('comparePasswords') || content.includes('timingSafeEqual')) {
              filesWithComparePasswords.push(fullPath);
              log(`‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô comparePasswords: ${fullPath}`, colors.green);
            }
          }
        }
      };
      
      if (await fs.access(distDir).then(() => true).catch(() => false)) {
        await findFiles(distDir);
      }
    } catch (error) {
      log(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå: ${error.message}`, colors.red);
    }
    
    if (filesWithComparePasswords.length > 0) {
      authFilePath = filesWithComparePasswords[0];
    } else {
      log(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô comparePasswords`, colors.red);
      return;
    }
  }
  
  // ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå
  log(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå ${authFilePath}...`, colors.cyan);
  const content = await fs.readFile(authFilePath, 'utf8');
  
  // ‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô comparePasswords
  const comparePasswordsRegex = /async\s+function\s+comparePasswords\s*\([^)]*\)\s*{[\s\S]*?}/;
  const timingSafeEqualRegex = /timingSafeEqual\s*\([^)]*\)/g;
  
  // ‡∏´‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô comparePasswords
  const comparePasswordsMatch = content.match(comparePasswordsRegex);
  
  if (comparePasswordsMatch) {
    log(`‚úÖ ‡∏û‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô comparePasswords`, colors.green);
    
    const fixedContent = content.replace(comparePasswordsRegex, `async function comparePasswords(supplied, stored) {
  try {
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏≤‡πÉ‡∏ä‡πâ bcrypt.compare ‡πÅ‡∏ó‡∏ô ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ buffer length
    const bcrypt = await import('bcrypt');
    return await bcrypt.compare(supplied, stored);
  } catch (error) {
    console.error("Error comparing passwords:", error);
    return false;
  }
}`);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    await fs.writeFile(authFilePath, fixedContent);
    log(`‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô comparePasswords ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, colors.green);
  } else if (content.includes('timingSafeEqual')) {
    log(`‚úÖ ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ timingSafeEqual`, colors.green);
    
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ timingSafeEqual
    const fixedContent = content.replace(/const\s+comparePasswords[^{]*{[\s\S]*?}/, `const comparePasswords = async (supplied, stored) => {
  try {
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏≤‡πÉ‡∏ä‡πâ bcrypt.compare ‡πÅ‡∏ó‡∏ô ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ buffer length
    const bcrypt = await import('bcrypt');
    return await bcrypt.compare(supplied, stored);
  } catch (error) {
    console.error("Error comparing passwords:", error);
    return false;
  }
}`);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    await fs.writeFile(authFilePath, fixedContent);
    log(`‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ timingSafeEqual ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, colors.green);
  } else {
    log(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô comparePasswords ‡∏´‡∏£‡∏∑‡∏≠ timingSafeEqual`, colors.red);
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    const passwordCheckRegex = /password.*?(===|==|compare|check|validate)/g;
    const passwordMatches = content.match(passwordCheckRegex);
    
    if (passwordMatches) {
      log(`üîç ‡∏û‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô:`, colors.yellow);
      passwordMatches.forEach(match => {
        log(`- ${match}`, colors.blue);
      });
    }
  }
  
  log('\n==================================================', colors.bright + colors.cyan);
  log('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô', colors.bright + colors.green);
  log('==================================================', colors.bright + colors.cyan);
  log('\nüîç ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:', colors.cyan);
  log('1. ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà', colors.yellow);
  log('2. ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á', colors.yellow);
  log('3. ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: admin, ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô: admin123', colors.yellow);
}

// ‡∏£‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
main().catch(error => {
  log(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`, colors.red);
  if (error.stack) {
    log(`Stack trace: ${error.stack}`, colors.red);
  }
});