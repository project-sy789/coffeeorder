// ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Render

const { Pool } = require('pg');
const fs = require('fs');

// ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏µ
function colorText(text, colorCode) {
  return `${colorCode}${text}\x1b[0m`;
}

// ‡πÇ‡∏´‡∏•‡∏î .env ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
try {
  if (fs.existsSync('.env.local')) {
    require('dotenv').config({ path: '.env.local' });
    console.log(colorText('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .env.local ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '\x1b[32m'));
  } else if (fs.existsSync('.env')) {
    require('dotenv').config();
    console.log(colorText('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .env ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '\x1b[32m'));
  }
} catch (err) {
  console.error(colorText('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .env ‡πÑ‡∏î‡πâ', '\x1b[33m'));
}

const DATABASE_URL = process.env.DATABASE_URL;
if (!DATABASE_URL) {
  console.error(colorText('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö DATABASE_URL', '\x1b[31m'));
  process.exit(1);
}

console.log('================================================================');
console.log(colorText('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ô Render', '\x1b[36m'));
console.log('================================================================');

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Render internal database URL ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
const isInternalDb = DATABASE_URL.includes("internal") || 
                     DATABASE_URL.includes("postgresql.render.com") || 
                     DATABASE_URL.includes("postgres.render.com");

console.log(`URL ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${isInternalDb ? "Internal Render Database" : "External Database"}`);

// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
try {
  const url = new URL(DATABASE_URL);
  console.log("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:", {
    host: url.hostname,
    port: url.port || "5432",
    database: url.pathname.substring(1)
  });
} catch (e) {
  console.error(colorText("DATABASE_URL ‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:", '\x1b[31m'), e.message);
}

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const poolConfig = isInternalDb
  ? {
      connectionString: DATABASE_URL,
      ssl: false,
      max: 3,
      idleTimeoutMillis: 10000,
      connectionTimeoutMillis: 5000
    }
  : {
      connectionString: DATABASE_URL,
      ssl: { rejectUnauthorized: false },
      max: 3,
      idleTimeoutMillis: 10000,
      connectionTimeoutMillis: 5000
    };

console.log(`SSL: ${isInternalDb ? "‡∏õ‡∏¥‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö internal database)" : "‡πÄ‡∏õ‡∏¥‡∏î (rejectUnauthorized: false)"}`);
console.log(`Max connections: ${poolConfig.max}`);
console.log(`Connection timeout: ${poolConfig.connectionTimeoutMillis}ms`);

async function testConnection() {
  console.log(colorText("\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...", '\x1b[36m'));
  
  try {
    const pool = new Pool(poolConfig);
    
    console.log("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...");
    const client = await pool.connect();
    console.log(colorText("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", '\x1b[32m'));
    
    const result = await client.query("SELECT NOW() as time");
    console.log(colorText("‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ!", '\x1b[32m'));
    console.log("‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ö‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå:", result.rows[0].time);
    
    client.release();
    await pool.end();
    
    console.log(colorText("\n‚úÖ ‡∏ú‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏ú‡πà‡∏≤‡∏ô", '\x1b[32m'));
    return true;
  } catch (error) {
    console.error(colorText("\n‚ùå ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", '\x1b[31m'), error.message);
    
    console.log(colorText("\n‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤:", '\x1b[36m'));
    if (isInternalDb) {
      console.log("- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ internal database ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà");
      console.log("- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ssl: false ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö internal database");
      console.log("- ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á internal database ‡πÉ‡∏´‡∏°‡πà");
    } else {
      console.log("- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ DATABASE_URL ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      console.log("- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å Render");
      console.log("- ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ internal database ‡∏Ç‡∏≠‡∏á Render ‡πÅ‡∏ó‡∏ô");
    }
    
    return false;
  }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
testConnection()
  .then(success => {
    if (!success) {
      process.exit(1);
    }
  })
  .catch(err => {
    console.error(colorText("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î:", '\x1b[31m'), err);
    process.exit(1);
  });