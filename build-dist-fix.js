#!/usr/bin/env node

/**
 * ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå build ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå dist ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£ deploy ‡∏ö‡∏ô Render.com
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ drizzle-orm/pg-pool ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
 * 
 * ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:
 * 1. ‡∏£‡∏±‡∏ô: node build-dist-fix.js
 * 2. ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡πá‡∏à
 * 3. ‡∏ô‡∏≥‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ deploy ‡∏ö‡∏ô Render.com
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•
const colors = {
  reset: "\x1b[0m",
  bright: "\x1b[1m",
  red: "\x1b[31m",
  green: "\x1b[32m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  cyan: "\x1b[36m"
};

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏µ
 */
function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

/**
 * ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á shell
 */
function runCommand(command) {
  try {
    log(`üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${command}`, colors.blue);
    const output = execSync(command, { stdio: 'inherit' });
    return true;
  } catch (error) {
    log(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${error.message}`, colors.red);
    return false;
  }
}

/**
 * ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≠‡∏°‡πÑ‡∏û‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå dist
 */
function findCompiledFiles(dir, fileList = []) {
  if (!fs.existsSync(dir)) {
    return fileList;
  }
  
  const files = fs.readdirSync(dir);
  
  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory()) {
      findCompiledFiles(filePath, fileList);
    } else if (file.endsWith('.js')) {
      fileList.push(filePath);
    }
  });
  
  return fileList;
}

/**
 * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£ import drizzle-orm/pg-pool ‡πÄ‡∏õ‡πá‡∏ô drizzle-orm/neon-serverless
 */
function fixImports(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ñ‡∏∂‡∏á drizzle-orm/pg-pool
    if (content.includes('./pg-pool') || 
        content.includes('drizzle-orm/pg-pool') || 
        content.includes('pg-pool')) {
      log(`üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå: ${filePath}`, colors.yellow);
      
      // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const originalContent = content;
      content = content.replace(/['"]drizzle-orm\/pg-pool['"]/g, '"drizzle-orm/neon-serverless"');
      content = content.replace(/['"]\.\/.+\/pg-pool['"]/g, '"drizzle-orm/neon-serverless"');
      content = content.replace(/["']\.\.\/pg-pool["']/g, '"drizzle-orm/neon-serverless"');
      content = content.replace(/["']\.\/pg-pool["']/g, '"drizzle-orm/neon-serverless"');
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
      if (content !== originalContent) {
        fs.writeFileSync(filePath, content);
        log(`‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå ${filePath} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, colors.green);
        return true;
      }
    }
    
    return false;
  } catch (error) {
    log(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå ${filePath}: ${error.message}`, colors.red);
    return false;
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
 */
function main() {
  log("\nüîß ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠ build ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Render.com üîß", colors.bright + colors.cyan);
  log("====================================================\n");
  
  // Build ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
  log("üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á build ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ...", colors.cyan);
  if (!runCommand('npm run build')) {
    log("‚ùå Build ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", colors.red);
    return false;
  }
  
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå dist
  log("\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≠‡∏°‡πÑ‡∏û‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß...", colors.cyan);
  const distDir = path.resolve(process.cwd(), 'dist');
  
  if (!fs.existsSync(distDir)) {
    log(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå dist ‡∏ó‡∏µ‡πà ${distDir}`, colors.red);
    return false;
  }
  
  const files = findCompiledFiles(distDir);
  log(`‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≠‡∏°‡πÑ‡∏û‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${files.length} ‡πÑ‡∏ü‡∏•‡πå`, colors.blue);
  
  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£ import ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  let fixedCount = 0;
  for (const file of files) {
    if (fixImports(file)) {
      fixedCount++;
    }
  }
  
  if (fixedCount > 0) {
    log(`\n‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${fixedCount} ‡πÑ‡∏ü‡∏•‡πå`, colors.green);
    log("\n‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:", colors.cyan);
    log("1. ‡∏ô‡∏≥‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ deploy ‡∏ö‡∏ô Render.com", colors.yellow);
    log("2. ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ DATABASE_URL ‡∏ö‡∏ô Render.com ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô internal database URL", colors.yellow);
    log("3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á @neondatabase/serverless ‡πÅ‡∏•‡πâ‡∏ß", colors.yellow);
  } else {
    log("\n‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡πÅ‡∏ï‡πà build ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", colors.yellow);
    log("‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ deploy ‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error log ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", colors.yellow);
  }
  
  return true;
}

// ‡∏£‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
main();