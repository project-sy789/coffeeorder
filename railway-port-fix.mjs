/**
 * ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Railway ‡∏î‡πâ‡∏ß‡∏¢ ES Module
 * 
 * ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: Railway ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï
 * ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: ‡∏£‡∏±‡∏ô NODE_OPTIONS=--experimental-vm-modules node railway-port-fix.mjs 
 */

import { createRequire } from 'module';
import { fileURLToPath } from 'url';
import { dirname, resolve } from 'path';
import { promises as fs } from 'fs';

// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡πÅ‡∏ö‡∏ö CommonJS
const require = createRequire(import.meta.url);
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•
const colors = {
  reset: "\x1b[0m",
  bright: "\x1b[1m",
  red: "\x1b[31m",
  green: "\x1b[32m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  cyan: "\x1b[36m"
};

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏µ
 */
function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ PORT ‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
log("\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï...", colors.cyan);
const port = process.env.PORT || 5000;
log(`üìä ‡∏Ñ‡πà‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${port}`, colors.blue);

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå index.js ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå dist
const distIndexPath = resolve(process.cwd(), 'dist/index.js');
try {
  const indexExists = await fs.access(distIndexPath).then(() => true).catch(() => false);
  
  if (indexExists) {
    log("‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå dist/index.js", colors.green);
    
    // ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå
    let content = await fs.readFile(distIndexPath, 'utf8');
    
    // ‡∏´‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
    const portRegex = /const\s+PORT\s*=\s*process\.env\.PORT\s*\|\|\s*\d+/g;
    const listenRegex = /app\.listen\(\s*(\w+|\d+)\s*,/g;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï
    let portMatches = content.match(portRegex);
    let listenMatches = content.match(listenRegex);
    
    if (portMatches) {
      log(`üîç ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï: ${portMatches[0]}`, colors.blue);
      
      // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ process.env.PORT ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      content = content.replace(portRegex, `const PORT = process.env.PORT || 8080`);
      log("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÅ‡∏•‡πâ‡∏ß", colors.green);
    } else {
      log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥", colors.yellow);
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® PORT ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏ô‡πÑ‡∏ü‡∏•‡πå
      const mainImports = content.match(/^(import.+\n)+/);
      if (mainImports) {
        const importSection = mainImports[0];
        content = content.replace(importSection, `${importSection}\n// Railway port configuration\nconst PORT = process.env.PORT || 8080;\nconsole.log("Server will start on PORT:", PORT);\n`);
        log("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® PORT ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Railway ‡πÅ‡∏•‡πâ‡∏ß", colors.green);
      }
    }
    
    if (listenMatches) {
      log(`üîç ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÉ‡∏ô app.listen: ${listenMatches[0]}`, colors.blue);
      
      // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÉ‡∏ô app.listen
      content = content.replace(listenRegex, `app.listen(PORT,`);
      log("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÉ‡∏ô app.listen ‡πÅ‡∏•‡πâ‡∏ß", colors.green);
    } else {
      log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÉ‡∏ô app.listen", colors.yellow);
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    if (!content.includes('console.log(`Server is running on port')) {
      const serverStartPattern = /app\.listen\(.*\)/;
      content = content.replace(
        serverStartPattern, 
        match => `${match}\n  console.log(\`Server is running on port \${PORT}\`);`
      );
      log("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß", colors.green);
    }
    
    // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    await fs.writeFile(distIndexPath, content);
    log("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß", colors.green);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå railway.json
    const railwayJsonPath = resolve(process.cwd(), 'railway.json');
    const railwayJsonExists = await fs.access(railwayJsonPath).then(() => true).catch(() => false);
    
    if (railwayJsonExists) {
      log("‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå railway.json", colors.green);
      const railwayJson = JSON.parse(await fs.readFile(railwayJsonPath, 'utf8'));
      log(`üìÑ Railway.json: ${JSON.stringify(railwayJson, null, 2)}`, colors.blue);
    } else {
      log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå railway.json", colors.yellow);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á railway.json
      const railwayJson = {
        "$schema": "https://railway.app/railway.schema.json",
        "build": {
          "builder": "NIXPACKS",
          "buildCommand": "npm run build"
        },
        "deploy": {
          "startCommand": "node dist/index.js",
          "healthcheckPath": "/",
          "healthcheckTimeout": 100,
          "restartPolicyType": "ON_FAILURE",
          "restartPolicyMaxRetries": 10
        }
      };
      
      await fs.writeFile(railwayJsonPath, JSON.stringify(railwayJson, null, 2));
      log("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå railway.json ‡πÅ‡∏•‡πâ‡∏ß", colors.green);
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå Procfile
    const procfilePath = resolve(process.cwd(), 'Procfile');
    const procfileExists = await fs.access(procfilePath).then(() => true).catch(() => false);
    
    if (procfileExists) {
      log("‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Procfile", colors.green);
      const procfileContent = await fs.readFile(procfilePath, 'utf8');
      log(`üìÑ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ Procfile: ${procfileContent}`, colors.blue);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Procfile ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î web: node dist/index.js ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!procfileContent.includes('web: node dist/index.js')) {
        await fs.writeFile(procfilePath, 'web: node dist/index.js');
        log("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå Procfile ‡πÅ‡∏•‡πâ‡∏ß", colors.green);
      }
    } else {
      log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Procfile", colors.yellow);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Procfile
      await fs.writeFile(procfilePath, 'web: node dist/index.js');
      log("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Procfile ‡πÅ‡∏•‡πâ‡∏ß", colors.green);
    }
    
    log("\n==================================================", colors.bright + colors.cyan);
    log("‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Railway ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô", colors.bright + colors.green);
    log("==================================================", colors.bright + colors.cyan);
    log("\nüîç ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:", colors.cyan);
    log("1. ‡∏£‡∏µ‡πÄ‡∏î‡∏û‡∏•‡∏≠‡∏¢‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ö‡∏ô Railway", colors.yellow);
    log("2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ PORT ‡∏Ç‡∏≠‡∏á Railway ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô 8080", colors.yellow);
    log("3. ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏•‡∏≠‡∏á‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏û‡∏•‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà", colors.yellow);
    log("4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ WebSocket ‡πÅ‡∏•‡∏∞ HTTP ‡πÉ‡∏ä‡πâ‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô", colors.yellow);
  } else {
    log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå dist/index.js", colors.red);
    log("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£ build ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÅ‡∏•‡πâ‡∏ß", colors.yellow);
  }
} catch (error) {
  log(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`, colors.red);
  if (error.stack) {
    log(`Stack trace: ${error.stack}`, colors.red);
  }
}