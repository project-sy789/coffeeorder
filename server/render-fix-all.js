#!/usr/bin/env node

/**
 * ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£ deploy ‡∏ö‡∏ô Render.com ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£
 * 
 * ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:
 * 1. Error [ERR_PACKAGE_PATH_NOT_EXPORTED]: Package subpath './pg-pool'
 * 2. Database connection test failed: ErrorEvent
 * 3. WebSocket connection issues
 * 
 * ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:
 * 1. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Render.com
 * 2. ‡∏£‡∏±‡∏ô: node server/render-fix-all.js
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•
const colors = {
  reset: "\x1b[0m",
  bright: "\x1b[1m",
  red: "\x1b[31m",
  green: "\x1b[32m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  cyan: "\x1b[36m"
};

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏µ
 */
function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

/**
 * ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≠‡∏°‡πÑ‡∏û‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå dist
 */
function findCompiledFiles(dir, fileList = []) {
  if (!fs.existsSync(dir)) {
    return fileList;
  }

  const files = fs.readdirSync(dir);
  
  files.forEach(file => {
    const filePath = path.join(dir, file);
    if (!fs.existsSync(filePath)) return;
    
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory()) {
      findCompiledFiles(filePath, fileList);
    } else if (file.endsWith('.js')) {
      fileList.push(filePath);
    }
  });
  
  return fileList;
}

/**
 * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£ import drizzle-orm/pg-pool ‡πÄ‡∏õ‡πá‡∏ô drizzle-orm/neon-serverless
 */
function fixImports(filePath) {
  try {
    if (!fs.existsSync(filePath)) {
      log(`‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö: ${filePath}`, colors.yellow);
      return false;
    }
    
    let content = fs.readFileSync(filePath, 'utf8');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ñ‡∏∂‡∏á drizzle-orm/pg-pool
    const needsFixing = content.includes('./pg-pool') || 
                       content.includes('drizzle-orm/pg-pool') || 
                       content.includes('pg-pool');
                       
    if (needsFixing) {
      log(`üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå: ${filePath}`, colors.yellow);
      
      // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const originalContent = content;
      content = content.replace(/['"]drizzle-orm\/pg-pool['"]/g, '"drizzle-orm/neon-serverless"');
      content = content.replace(/['"]\.\/.+\/pg-pool['"]/g, '"drizzle-orm/neon-serverless"');
      content = content.replace(/["']\.\.\/pg-pool["']/g, '"drizzle-orm/neon-serverless"');
      content = content.replace(/["']\.\/pg-pool["']/g, '"drizzle-orm/neon-serverless"');
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
      if (content !== originalContent) {
        fs.writeFileSync(filePath, content);
        log(`‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå ${filePath} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, colors.green);
        return true;
      }
    }
    
    return false;
  } catch (error) {
    log(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå ${filePath}: ${error.message}`, colors.red);
    return false;
  }
}

/**
 * ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÑ‡∏ü‡∏•‡πå db.js/db.ts ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ pg ‡πÅ‡∏ó‡∏ô @neondatabase/serverless
 */
function fixDatabaseConnection(filePath) {
  if (!fs.existsSync(filePath)) {
    log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${filePath}`, colors.yellow);
    return false;
  }
  
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ @neondatabase/serverless ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const hasNeonImport = content.includes("@neondatabase/serverless");
    
    if (hasNeonImport) {
      log(`üìù ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô database ‡πÉ‡∏ô: ${filePath}`, colors.yellow);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå db.js ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô
      const newContent = content
        .replace(/['"]@neondatabase\/serverless['"]/g, "'pg'")
        .replace(/neonConfig\.webSocketConstructor\s*=\s*[^;]+;/g, '// WebSocket connection removed for Render compatibility')
        .replace(/import\s+{\s*neonConfig\s*}/g, '// import { neonConfig } removed for Render compatibility');
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
      if (newContent !== content) {
        fs.writeFileSync(filePath, newContent);
        log(`‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${filePath}`, colors.green);
        return true;
      }
    }
    
    return false;
  } catch (error) {
    log(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${error.message}`, colors.red);
    return false;
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢
 */
function createDatabaseTestFile() {
  const filePath = path.resolve(process.cwd(), 'db-test.js');
  
  const content = `
// ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Render

const { Pool } = require('pg');
const fs = require('fs');

// ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏µ
function colorText(text, colorCode) {
  return \`\${colorCode}\${text}\x1b[0m\`;
}

// ‡πÇ‡∏´‡∏•‡∏î .env ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
try {
  if (fs.existsSync('.env.local')) {
    require('dotenv').config({ path: '.env.local' });
    console.log(colorText('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .env.local ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '\x1b[32m'));
  } else if (fs.existsSync('.env')) {
    require('dotenv').config();
    console.log(colorText('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .env ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '\x1b[32m'));
  }
} catch (err) {
  console.error(colorText('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .env ‡πÑ‡∏î‡πâ', '\x1b[33m'));
}

const DATABASE_URL = process.env.DATABASE_URL;
if (!DATABASE_URL) {
  console.error(colorText('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö DATABASE_URL', '\x1b[31m'));
  process.exit(1);
}

console.log('================================================================');
console.log(colorText('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ô Render', '\x1b[36m'));
console.log('================================================================');

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Render internal database URL ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
const isInternalDb = DATABASE_URL.includes("internal") || 
                     DATABASE_URL.includes("postgresql.render.com") || 
                     DATABASE_URL.includes("postgres.render.com");

console.log(\`URL ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: \${isInternalDb ? "Internal Render Database" : "External Database"}\`);

// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
try {
  const url = new URL(DATABASE_URL);
  console.log("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:", {
    host: url.hostname,
    port: url.port || "5432",
    database: url.pathname.substring(1)
  });
} catch (e) {
  console.error(colorText("DATABASE_URL ‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:", '\x1b[31m'), e.message);
}

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const poolConfig = isInternalDb
  ? {
      connectionString: DATABASE_URL,
      ssl: false,
      max: 3,
      idleTimeoutMillis: 10000,
      connectionTimeoutMillis: 5000
    }
  : {
      connectionString: DATABASE_URL,
      ssl: { rejectUnauthorized: false },
      max: 3,
      idleTimeoutMillis: 10000,
      connectionTimeoutMillis: 5000
    };

console.log(\`SSL: \${isInternalDb ? "‡∏õ‡∏¥‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö internal database)" : "‡πÄ‡∏õ‡∏¥‡∏î (rejectUnauthorized: false)"}\`);
console.log(\`Max connections: \${poolConfig.max}\`);
console.log(\`Connection timeout: \${poolConfig.connectionTimeoutMillis}ms\`);

async function testConnection() {
  console.log(colorText("\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...", '\x1b[36m'));
  
  try {
    const pool = new Pool(poolConfig);
    
    console.log("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...");
    const client = await pool.connect();
    console.log(colorText("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", '\x1b[32m'));
    
    const result = await client.query("SELECT NOW() as time");
    console.log(colorText("‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ!", '\x1b[32m'));
    console.log("‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ö‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå:", result.rows[0].time);
    
    client.release();
    await pool.end();
    
    console.log(colorText("\n‚úÖ ‡∏ú‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏ú‡πà‡∏≤‡∏ô", '\x1b[32m'));
    return true;
  } catch (error) {
    console.error(colorText("\n‚ùå ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", '\x1b[31m'), error.message);
    
    console.log(colorText("\n‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤:", '\x1b[36m'));
    if (isInternalDb) {
      console.log("- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ internal database ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà");
      console.log("- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ssl: false ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö internal database");
      console.log("- ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á internal database ‡πÉ‡∏´‡∏°‡πà");
    } else {
      console.log("- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ DATABASE_URL ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      console.log("- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å Render");
      console.log("- ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ internal database ‡∏Ç‡∏≠‡∏á Render ‡πÅ‡∏ó‡∏ô");
    }
    
    return false;
  }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
testConnection()
  .then(success => {
    if (!success) {
      process.exit(1);
    }
  })
  .catch(err => {
    console.error(colorText("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î:", '\x1b[31m'), err);
    process.exit(1);
  });
`;

  fs.writeFileSync(filePath, content);
  log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß: ${filePath}`, colors.green);
  return true;
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
 */
function main() {
  log("\nüîß ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£ deploy ‡∏ö‡∏ô Render.com ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£ üîß", colors.bright + colors.cyan);
  log("=================================================================\n");
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô Render.com ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const isRender = process.env.RENDER || process.env.RENDER_INTERNAL_HOSTNAME;
  log(`‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°: ${isRender ? 'Render.com' : 'Local/Other'}`, colors.blue);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á pg
  let pgInstalled = false;
  try {
    require.resolve('pg');
    pgInstalled = true;
    log("‚úÖ pg package ‡∏ñ‡∏π‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß", colors.green);
  } catch (error) {
    log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö pg package - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢ npm install pg", colors.red);
    return false;
  }
  
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå db.js/db.ts
  let dbFixed = false;
  const possibleDbPaths = [
    path.resolve(process.cwd(), 'dist/db.js'),
    path.resolve(process.cwd(), 'dist/server/db.js'),
    path.resolve(process.cwd(), 'server/db.js')
  ];
  
  for (const dbPath of possibleDbPaths) {
    if (fs.existsSync(dbPath)) {
      log(`‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${dbPath}`, colors.blue);
      if (fixDatabaseConnection(dbPath)) {
        dbFixed = true;
      }
    }
  }
  
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå dist
  log("\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≠‡∏°‡πÑ‡∏û‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß...", colors.cyan);
  const distDir = path.resolve(process.cwd(), 'dist');
  
  if (!fs.existsSync(distDir)) {
    log(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå dist ‡∏ó‡∏µ‡πà ${distDir}`, colors.red);
    log("‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á npm run build ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", colors.yellow);
  } else {
    const files = findCompiledFiles(distDir);
    log(`‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≠‡∏°‡πÑ‡∏û‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${files.length} ‡πÑ‡∏ü‡∏•‡πå`, colors.blue);
    
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£ import ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    let fixedCount = 0;
    for (const file of files) {
      if (fixImports(file)) {
        fixedCount++;
      }
    }
    
    if (fixedCount > 0) {
      log(`\n‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${fixedCount} ‡πÑ‡∏ü‡∏•‡πå`, colors.green);
    } else {
      log("\n‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", colors.yellow);
    }
  }
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  log("\nüìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...", colors.cyan);
  createDatabaseTestFile();
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
  log("\nüîç ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Render.com:", colors.bright + colors.cyan);
  log("1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô @neondatabase/serverless ‡πÄ‡∏õ‡πá‡∏ô pg ‡πÅ‡∏•‡πâ‡∏ß", colors.yellow);
  log("2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ node db-test.js", colors.yellow);
  log("3. ‡∏´‡∏≤‡∏Å‡πÉ‡∏ä‡πâ internal database ‡∏Ç‡∏≠‡∏á Render ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ssl: false", colors.yellow);
  log("4. ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô max connections (max: 3) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£", colors.yellow);
  log("5. ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ internal database ‡∏Ç‡∏≠‡∏á Render ‡πÅ‡∏ó‡∏ô", colors.yellow);
  log("6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö logs ‡∏ö‡∏ô Render dashboard ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", colors.yellow);
  
  return true;
}

// ‡∏£‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
main();